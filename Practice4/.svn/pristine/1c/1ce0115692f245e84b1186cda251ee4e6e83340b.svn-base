package ua.nure.nefedchenko.practice4;

import java.io.*;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Part4 implements Iterable<String> {
    private static final String ENCODING = "Cp1251";
    private Matcher matcher;

    Part4() throws IOException {
        String input = fileReader("src/ua/nure/nefedchenko/practice4/part4.txt", false);
        String regex = "([А-ЯA-Z]((т.п.|т.д.|пр.)|[^?!.(]|\\([^)]*\\))*[.?!])";
        Pattern pattern = Pattern.compile(regex, Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CHARACTER_CLASS);
        matcher = pattern.matcher(input);
    }

    public static String fileReader(String name, boolean useEol) {
        File file = new File(name);
        StringBuilder stringBuilder = new StringBuilder();


        try (BufferedReader br = new BufferedReader(
                new InputStreamReader(
                        new FileInputStream(file), ENCODING))) {

            if (!file.exists() && !file.createNewFile()) {
                //file create failed
            }

            String line = "";
            while ((line = br.readLine()) != null) {
                stringBuilder.append(line);
                if (useEol) {
                    stringBuilder.append(System.lineSeparator());
                }
            }
        } catch (IOException e) {
            e.getMessage();
        }

        return stringBuilder.toString();
    }

    class IteratorImpl implements Iterator<String> {

        private int count;
        private boolean check;

        public IteratorImpl() {
            this.count = 0;
            this.check = false;
        }

        @Override
        public boolean hasNext() {
            if (++count == 1) {
                check = matcher.find();
                return check;
            } else {
                return check;
            }
        }

        @Override
        public String next() {
            if (hasNext()) {
                count = 0;
                return matcher.group().trim();
            } else {
                throw new NoSuchElementException();
            }
        }

        @Override
        public void remove() {
            throw new UnsupportedOperationException();
        }

    }

    @Override
    public Iterator<String> iterator() {
        return new IteratorImpl();
    }

    public static void main(String[] args) throws IOException {
        for (String line : new Part4())
            System.out.println(line);
    }
}
